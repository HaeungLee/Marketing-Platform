version: '3.8'

# 개발환경용 Docker Compose
# 핫 리로드와 디버깅을 지원하는 개발 환경

services:
  # PostgreSQL 데이터베이스 (운영환경과 동일)
  postgres:
    image: postgres:15-alpine
    container_name: marketing_platform_db_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-marketing_platform_dev}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d/
    ports:
      - "5433:5432"  # 운영환경과 포트 분리
    networks:
      - marketing_dev_network

  # Redis 캐시 (개발환경)
  redis:
    image: redis:7-alpine
    container_name: marketing_platform_cache_dev
    restart: unless-stopped
    ports:
      - "6380:6379"  # 운영환경과 포트 분리
    networks:
      - marketing_dev_network

  # 백엔드 개발 서버 (핫 리로드)
  backend-dev:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: marketing_platform_api_dev
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/${POSTGRES_DB:-marketing_platform_dev}
      REDIS_URL: redis://redis:6379/0
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      DEBUG: true
      SECRET_KEY: dev-secret-key
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173
    volumes:
      - ./backend:/app  # 소스 코드 마운트 (핫 리로드)
      - ./logs:/app/logs
    ports:
      - "8001:8000"  # 운영환경과 포트 분리
    depends_on:
      - postgres
      - redis
    networks:
      - marketing_dev_network

  # 데이터베이스 관리 도구
  adminer:
    image: adminer:latest
    container_name: marketing_platform_adminer_dev
    restart: unless-stopped
    ports:
      - "8081:8080"
    depends_on:
      - postgres
    networks:
      - marketing_dev_network

# 개발환경 네트워크
networks:
  marketing_dev_network:
    driver: bridge
    name: marketing_platform_dev_network

# 개발환경 볼륨
volumes:
  postgres_dev_data:
    name: marketing_platform_postgres_dev_data
