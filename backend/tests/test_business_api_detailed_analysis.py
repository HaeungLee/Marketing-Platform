"""
소상공인시장진흥공단_상가(상권)정보_API 상세 데이터 구조 분석
웹 검색 결과를 바탕으로 실제 데이터 구조 파악 및 활용 방안 분석
"""

import pandas as pd
import json
from typing import Dict, List, Any

class BusinessAPIDetailedAnalyzer:
    def __init__(self):
        """웹 검색 결과를 바탕으로 한 실제 데이터 구조"""
        
        # 실제 API에서 제공하는 주요 컬럼들 (웹 검색 결과 기반)
        self.expected_columns = {
            # 기본 정보
            "상호명": "상가업소의 상호명",
            "업종코드": "표준산업분류 기반 업종코드 (247개 소분류)",
            "업종명": "업종명 (대분류 10개, 중분류 75개, 소분류 247개)",
            
            # 위치 정보
            "지번주소": "지번 기반 주소",
            "도로명주소": "도로명 기반 주소", 
            "경도": "경도 좌표",
            "위도": "위도 좌표",
            
            # 행정구역 정보
            "시도명": "시/도 정보",
            "시군구명": "시/군/구 정보", 
            "행정동명": "행정동 정보",
            
            # 영업 정보
            "상가업소번호": "새롭게 생성된 상가업소 고유번호",
            "개업일자": "개업일자 (YYYYMMDD)",
            "폐업일자": "폐업일자 (YYYYMMDD, 영업중이면 빈값)",
            "영업상태": "영업/폐업 상태",
            
            # 추가 정보 (있을 수 있는 컬럼들)
            "표준산업분류코드": "10차 표준산업분류 코드",
            "상권업종분류코드": "상권업종분류 코드",
            "건물명": "건물명",
            "층정보": "층 정보",
            "호정보": "호 정보"
        }
        
        # 업종 분류 체계 (웹 검색 결과 기반)
        self.industry_classification = {
            "대분류": 10,  # 10개 대분류
            "중분류": 75,  # 75개 중분류  
            "소분류": 247  # 247개 소분류 (기존 837개에서 개편)
        }
        
        # 데이터 변경 사항 (2023년 4월부터 적용)
        self.data_changes = {
            "데이터_수급처": "행안부 인허가 데이터 → 국세청 사업자등록업소",
            "상권업종분류": "837개 → 247개로 개편",
            "표준산업분류": "9차 → 10차 개편",
            "상가업소번호": "새롭게 생성 (과거 데이터와 연계 불가)",
            "API_서비스명": "변경됨 (서비스는 동일)"
        }
    
    def create_realistic_sample_data(self) -> pd.DataFrame:
        """실제 API 구조를 반영한 현실적인 샘플 데이터 생성"""
        
        sample_data = [
            {
                "상가업소번호": "11680100001",
                "상호명": "스타벅스 강남역점",
                "업종코드": "I56111",
                "업종명": "커피전문점",
                "표준산업분류코드": "56111",
                "상권업종분류코드": "CS100101",
                "지번주소": "서울특별시 강남구 역삼동 123-45",
                "도로명주소": "서울특별시 강남구 테헤란로 123",
                "경도": "127.0276",
                "위도": "37.4979",
                "시도명": "서울특별시",
                "시군구명": "강남구",
                "행정동명": "역삼동",
                "건물명": "강남빌딩",
                "층정보": "1층",
                "호정보": "101호",
                "개업일자": "20230315",
                "폐업일자": "",
                "영업상태": "영업"
            },
            {
                "상가업소번호": "11680100002", 
                "상호명": "맛있는 한식당",
                "업종코드": "I56211",
                "업종명": "한식음식점",
                "표준산업분류코드": "56211",
                "상권업종분류코드": "RS100101",
                "지번주소": "서울특별시 강남구 역삼동 123-47",
                "도로명주소": "서울특별시 강남구 테헤란로 125",
                "경도": "127.0278",
                "위도": "37.4981",
                "시도명": "서울특별시",
                "시군구명": "강남구",
                "행정동명": "역삼동",
                "건물명": "역삼타워",
                "층정보": "지하1층",
                "호정보": "B101호",
                "개업일자": "20220801",
                "폐업일자": "",
                "영업상태": "영업"
            },
            {
                "상가업소번호": "11680100003",
                "상호명": "GS25 테헤란점",
                "업종코드": "G47111",
                "업종명": "편의점",
                "표준산업분류코드": "47111",
                "상권업종분류코드": "RT100101",
                "지번주소": "서울특별시 강남구 역삼동 123-49",
                "도로명주소": "서울특별시 강남구 테헤란로 127",
                "경도": "127.0280",
                "위도": "37.4983",
                "시도명": "서울특별시",
                "시군구명": "강남구",
                "행정동명": "역삼동",
                "건물명": "",
                "층정보": "1층",
                "호정보": "",
                "개업일자": "20210601",
                "폐업일자": "",
                "영업상태": "영업"
            },
            {
                "상가업소번호": "11680100004",
                "상호명": "헤어샵 뷰티",
                "업종코드": "S96121",
                "업종명": "미용업",
                "표준산업분류코드": "96121",
                "상권업종분류코드": "PS100101",
                "지번주소": "서울특별시 강남구 역삼동 123-51",
                "도로명주소": "서울특별시 강남구 테헤란로 129",
                "경도": "127.0282",
                "위도": "37.4985",
                "시도명": "서울특별시",
                "시군구명": "강남구",
                "행정동명": "역삼동",
                "건물명": "뷰티플라자",
                "층정보": "2층",
                "호정보": "201호",
                "개업일자": "20200315",
                "폐업일자": "20231201",
                "영업상태": "폐업"
            },
            {
                "상가업소번호": "11680100005",
                "상호명": "약국 건강",
                "업종코드": "G47731",
                "업종명": "의약품소매업",
                "표준산업분류코드": "47731",
                "상권업종분류코드": "RT200101",
                "지번주소": "서울특별시 강남구 역삼동 123-53",
                "도로명주소": "서울특별시 강남구 테헤란로 131",
                "경도": "127.0284",
                "위도": "37.4987",
                "시도명": "서울특별시",
                "시군구명": "강남구",
                "행정동명": "역삼동",
                "건물명": "메디컬센터",
                "층정보": "1층",
                "호정보": "102호",
                "개업일자": "20190801",
                "폐업일자": "",
                "영업상태": "영업"
            }
        ]
        
        return pd.DataFrame(sample_data)
    
    def analyze_business_potential(self, df: pd.DataFrame) -> Dict[str, Any]:
        """비즈니스 활용 가능성 분석"""
        
        analysis = {
            "데이터_품질": {
                "총_레코드수": len(df),
                "위치정보_완성도": {
                    "경도위도_있음": len(df[df['경도'].notna() & df['위도'].notna()]),
                    "도로명주소_있음": len(df[df['도로명주소'].notna()]),
                    "지번주소_있음": len(df[df['지번주소'].notna()])
                },
                "영업상태_분포": df['영업상태'].value_counts().to_dict()
            },
            
            "업종_분석": {
                "업종_다양성": df['업종명'].nunique(),
                "주요_업종": df['업종명'].value_counts().head(5).to_dict(),
                "업종코드_체계": "표준산업분류 10차 기반"
            },
            
            "지역_분석": {
                "시도_분포": df['시도명'].value_counts().to_dict(),
                "시군구_분포": df['시군구명'].value_counts().to_dict(),
                "행정동_분포": df['행정동명'].value_counts().to_dict()
            },
            
            "시간_분석": {
                "개업년도_분포": df['개업일자'].str[:4].value_counts().to_dict(),
                "폐업_비율": len(df[df['영업상태'] == '폐업']) / len(df) * 100
            }
        }
        
        return analysis
    
    def suggest_leaflet_integration(self) -> Dict[str, Any]:
        """Leaflet 지도 연동 방안 제안"""
        
        integration_plan = {
            "핵심_기능": {
                "1_기본_마커_표시": {
                    "설명": "사용자 선택 위치 주변 상가들을 지도에 마커로 표시",
                    "데이터": ["경도", "위도", "상호명", "업종명"],
                    "구현_난이도": "쉬움",
                    "시각적_임팩트": "높음"
                },
                
                "2_업종별_색상_구분": {
                    "설명": "업종에 따라 다른 색상/아이콘으로 마커 표시",
                    "데이터": ["업종코드", "업종명"],
                    "구현_난이도": "보통",
                    "시각적_임팩트": "매우높음"
                },
                
                "3_상가정보_팝업": {
                    "설명": "마커 클릭 시 상가 상세정보 팝업 표시",
                    "데이터": ["상호명", "업종명", "도로명주소", "개업일자", "영업상태"],
                    "구현_난이도": "쉬움",
                    "실용성": "높음"
                },
                
                "4_경쟁업체_필터링": {
                    "설명": "사용자 업종과 동일한 상가만 필터링하여 표시",
                    "데이터": ["업종코드", "업종명"],
                    "구현_난이도": "보통",
                    "비즈니스_가치": "매우높음"
                }
            },
            
            "고급_기능": {
                "1_상권_밀도_히트맵": {
                    "설명": "상가 밀집도를 히트맵으로 시각화",
                    "기술": "Leaflet.heat 플러그인",
                    "구현_난이도": "어려움",
                    "임팩트": "매우높음"
                },
                
                "2_반경별_통계": {
                    "설명": "선택 위치 기준 반경 500m, 1km 내 상가 통계",
                    "데이터": ["경도", "위도", "업종명"],
                    "구현_난이도": "보통",
                    "실용성": "높음"
                },
                
                "3_개폐업_트렌드": {
                    "설명": "최근 개업/폐업 상가 정보 표시",
                    "데이터": ["개업일자", "폐업일자", "영업상태"],
                    "구현_난이도": "보통",
                    "비즈니스_가치": "높음"
                }
            },
            
            "API_호출_전략": {
                "지역_기반_호출": "사용자 선택 위치의 시군구 기준으로 API 호출",
                "페이징_처리": "대량 데이터 처리를 위한 페이징",
                "캐싱_전략": "동일 지역 재요청 시 캐시 활용",
                "에러_처리": "API 호출 실패 시 샘플 데이터 활용"
            }
        }
        
        return integration_plan
    
    def create_business_use_cases(self) -> Dict[str, Any]:
        """비즈니스 활용 사례 제안"""
        
        use_cases = {
            "창업_위치_분석": {
                "시나리오": "카페 창업을 원하는 사용자가 강남역 근처 위치 선택",
                "제공_정보": [
                    "반경 500m 내 커피전문점 15개 위치 표시",
                    "경쟁 밀도: 높음 (평균 대비 200%)",
                    "추천: 역삼동보다 논현동 쪽이 경쟁이 적음"
                ],
                "AI_연계": "상권 특성을 바탕으로 마케팅 전략 제안"
            },
            
            "상권_특성_분석": {
                "시나리오": "선택한 위치의 상권 특성 파악",
                "제공_정보": [
                    "주요 업종: 음식점(35%), 소매업(25%), 서비스업(20%)",
                    "상권 유형: 오피스 밀집 지역",
                    "타겟 고객층: 직장인 중심"
                ],
                "마케팅_연계": "점심시간 타겟 마케팅 콘텐츠 생성"
            },
            
            "경쟁_현황_분석": {
                "시나리오": "동일 업종 경쟁업체 현황 파악",
                "제공_정보": [
                    "동일 업종 상가 위치 및 개업일자",
                    "최근 1년간 신규 개업: 3개",
                    "폐업률: 업종 평균 대비 낮음"
                ],
                "인사이트": "시장 포화도 및 진입 가능성 평가"
            }
        }
        
        return use_cases
    
    def generate_implementation_roadmap(self) -> Dict[str, Any]:
        """구현 로드맵 제안"""
        
        roadmap = {
            "1단계_기본구현": {
                "기간": "1-2일",
                "작업": [
                    "API 호출 및 데이터 파싱 구현",
                    "Leaflet 지도에 기본 마커 표시",
                    "상가 정보 팝업 구현"
                ],
                "결과": "기본적인 상가 위치 시각화"
            },
            
            "2단계_기능강화": {
                "기간": "2-3일", 
                "작업": [
                    "업종별 마커 색상/아이콘 구분",
                    "경쟁업체 필터링 기능",
                    "반경별 상가 통계 표시"
                ],
                "결과": "실용적인 상권 분석 도구"
            },
            
            "3단계_고도화": {
                "기간": "3-5일",
                "작업": [
                    "상권 밀도 히트맵",
                    "AI 기반 인사이트 생성",
                    "마케팅 콘텐츠 연계"
                ],
                "결과": "완성도 높은 창업 지원 시스템"
            }
        }
        
        return roadmap

def main():
    """메인 분석 실행"""
    print("🏪 소상공인시장진흥공단 상가정보 API 상세 분석")
    print("="*60)
    
    analyzer = BusinessAPIDetailedAnalyzer()
    
    # 1. 현실적인 샘플 데이터 생성
    print("\n📊 현실적인 샘플 데이터 생성...")
    df = analyzer.create_realistic_sample_data()
    print(f"✅ 샘플 데이터 생성 완료: {len(df)}행 × {len(df.columns)}열")
    
    # 2. 데이터 구조 출력
    print(f"\n📋 데이터 컬럼 정보:")
    for i, col in enumerate(df.columns):
        print(f"   {i+1:2d}. {col}")
    
    # 3. 샘플 데이터 미리보기
    print(f"\n📝 샘플 데이터 미리보기:")
    print(df[['상호명', '업종명', '도로명주소', '영업상태']].to_string())
    
    # 4. 비즈니스 활용 가능성 분석
    print(f"\n🎯 비즈니스 활용 가능성 분석...")
    business_analysis = analyzer.analyze_business_potential(df)
    print(f"   - 위치정보 완성도: {business_analysis['데이터_품질']['위치정보_완성도']}")
    print(f"   - 업종 다양성: {business_analysis['업종_분석']['업종_다양성']}개 업종")
    print(f"   - 영업상태 분포: {business_analysis['데이터_품질']['영업상태_분포']}")
    
    # 5. Leaflet 연동 방안
    print(f"\n🗺️ Leaflet 지도 연동 방안...")
    integration_plan = analyzer.suggest_leaflet_integration()
    print(f"   핵심 기능 {len(integration_plan['핵심_기능'])}개, 고급 기능 {len(integration_plan['고급_기능'])}개 제안")
    
    # 6. 비즈니스 활용 사례
    print(f"\n💼 비즈니스 활용 사례...")
    use_cases = analyzer.create_business_use_cases()
    for case_name, case_info in use_cases.items():
        print(f"   - {case_name}: {case_info['시나리오']}")
    
    # 7. 구현 로드맵
    print(f"\n🛣️ 구현 로드맵...")
    roadmap = analyzer.generate_implementation_roadmap()
    for phase, info in roadmap.items():
        print(f"   - {phase}: {info['기간']} ({info['결과']})")
    
    # 8. 결과 저장
    analysis_result = {
        "sample_data": df.to_dict('records'),
        "business_analysis": business_analysis,
        "integration_plan": integration_plan,
        "use_cases": use_cases,
        "roadmap": roadmap,
        "expected_columns": analyzer.expected_columns,
        "data_changes": analyzer.data_changes
    }
    
    with open('business_api_detailed_analysis.json', 'w', encoding='utf-8') as f:
        json.dump(analysis_result, f, ensure_ascii=False, indent=2)
    
    print(f"\n💾 상세 분석 결과가 'business_api_detailed_analysis.json'에 저장되었습니다.")
    
    print("\n" + "="*60)
    print("🎯 결론 및 추천사항:")
    print("1. ✅ 지도 연동 가능성: 매우 높음 (경도/위도 데이터 완비)")
    print("2. ✅ 비즈니스 가치: 높음 (창업 위치 분석, 경쟁 현황 파악)")
    print("3. ✅ 구현 난이도: 보통 (기존 Leaflet 지도 활용 가능)")
    print("4. ✅ 발표 임팩트: 매우 높음 (국가 공공데이터 + AI 융합)")
    print("5. 🚀 추천: 1단계 기본 구현부터 시작하여 단계적 고도화")
    print("="*60)
    
    return df, analysis_result

if __name__ == "__main__":
    df, analysis = main() 